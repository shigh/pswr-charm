
mainmodule SWRCharm
{

	include "swr.hpp";
	include "utils.hpp";
	readonly CProxy_Main mainProxy;
	readonly CProxy_SWRDomain domainProxy;
	
	mainchare Main
	{
		entry Main(CkArgMsg* m);

		entry void callback();

	};

	array [2D] SWRDomain
	{

		entry SWRDomain(int K, int overlap_, int nt, double dt,
						int gny, double dy, int gnx, double dx,
						int GNx, int GNy);

		entry void set_boundary(boundary_t bndy, std::vector<double> vec);

		entry void run_simulation(int n_iter)
		{

			for(iteration=0; iteration<n_iter; iteration++)
			{
				serial
				{

					region->time_step_chunk();

					if(comm_west)
						domainProxy(west,thisIndex.y).set_boundary(EAST,
																   region->get_boundary(WEST, 0));
					if(comm_east)
						domainProxy(east,thisIndex.y).set_boundary(WEST,
																   region->get_boundary(EAST, 0));
					if(comm_north)
						domainProxy(thisIndex.x,north).set_boundary(SOUTH,
																	region->get_boundary(NORTH, 0));
					if(comm_south)
						domainProxy(thisIndex.x,south).set_boundary(NORTH,
																	region->get_boundary(SOUTH, 0));
				}

				when set_boundary(boundary_t bndy, std::vector<double> vec)
					serial
				{
					region->set_boundary(bndy, &vec[0], 0);
				}
				when set_boundary(boundary_t bndy, std::vector<double> vec)
					serial
				{
					region->set_boundary(bndy, &vec[0], 0);
				}

				serial
				{
					int error = 0;
					auto x = region->get_x();

					double err = 0;
					for(int i=0; i<x.size(); i++)
					{
						err = std::max(err, std::abs(x[i]-expected[i]));
					}

					ckout << iteration << ' ' << thisIndex.x << ' '
						  << thisIndex.y << ' ' << err << endl;
				}				

				serial
				{
					if(iteration<n_iter-1)
						region->reset();
				}
			}

			serial
			{
				mainProxy.callback();
			}
			
		};


	};

};

