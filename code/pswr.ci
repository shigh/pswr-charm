/* Local Variables: */
/* c-set-offset: 'substatement-open 0 */
/* c++-tab-always-indent: t */
/* c-basic-offset: 4 */
/* c-indent-level: 4 */
/* tab-stop-list: '(4 8 12 16 20 24 28 32 36 40 44 48 52 56 60)) */
/* tab-width: 4 */
/* indent-tabs-mode: t */
/* End: */

mainmodule PSWRCharm
{
	PUPable Solver;
	PUPable HeatSolverBTCS;
	PUPable DummySolver;
	include "pswr.hpp";
	include "interpolator.hpp";
	include "utils.hpp";
	readonly CProxy_Main mainProxy;
	readonly CProxy_PSWRDomain domainProxy;

	initnode void init_node();


	mainchare Main
	{
		entry Main(CkArgMsg* m);

		entry[reductiontarget] void maxErrorReduction(double error);

		// End of simulation callback
		entry void done(int idx_x, int idx_y, int iteration);

	};
	
	

	array [3D] PSWRDomain
	{
		
		entry PSWRDomain(int K, int overlap_, int nt, double dt,
						int gny, double dy, int gnx, double dx,
						int GNx, int GNy, int n_iter, int lb_freq);
		
		entry void set_boundary(int iter, boundary_t bndy, int nt2, int nx2, std::vector<double> vec);
		
		// Complete simulation logic
		entry void run_simulation()
		{
			serial {
				iteration = 0;
				run_iter();
			}		   
			
		};

		entry void run_iter()
		{
			for(curr_chunk=0; curr_chunk<K; curr_chunk++)
			{
				serial
				{
					// Do solves
					region->time_step_chunk();
				
					// Communicate
					if(next_itr!=-1)
					{
						if(comm_west)
							domainProxy(west,thisIndex.y,next_itr).set_boundary(iteration, EAST,
																				region->get_nt(curr_chunk),
																				region->get_boundary_size(WEST),
																				region->get_boundary(WEST,
																									 curr_chunk));
						if(comm_east)
							domainProxy(east,thisIndex.y,next_itr).set_boundary(iteration, WEST,
																				region->get_nt(curr_chunk),
																				region->get_boundary_size(EAST),
																				region->get_boundary(EAST,
																									 curr_chunk));
						if(comm_north)
							domainProxy(thisIndex.x,north,next_itr).set_boundary(iteration, SOUTH,
																				 region->get_nt(curr_chunk),
																				 region->get_boundary_size(NORTH),
																				 region->get_boundary(NORTH,
																									  curr_chunk));
						if(comm_south)
							domainProxy(thisIndex.x,south,next_itr).set_boundary(iteration, NORTH,
																				 region->get_nt(curr_chunk),
																				 region->get_boundary_size(SOUTH),
																				 region->get_boundary(SOUTH,
																									  curr_chunk));
					}
				}

				if(prev_itr!=-1)
				{
					// Recieve boundarys
					for(recv=0; recv<n_recv; recv++)
					{
						when set_boundary[iteration](int iter, boundary_t bndy, int nt2, int nx2,
													 std::vector<double> vec) serial
						{
							interpolate(region->get_nt(curr_chunk),
										region->get_boundary_size(bndy),
										interp,
										nt2, nx2, vec);
							region->set_boundary(bndy, &interp[0], curr_chunk);
						}
					}
				}

				// Error checks
				// TODO: This is a terrible way to handle error calcs
				serial
				{
					std::vector<double> x = region->get_x();
				
					double err = 0;
					for(int i=0; i<x.size(); i++)
					{
						err = std::max(err, std::abs(x[i]-expected[i]));
					}

					CkCallback cb(CkReductionTarget(Main, maxErrorReduction), mainProxy);
					contribute(sizeof(double), &err, CkReduction::max_double, cb);
				}				
			}
			// If there is another iteration, reset region
			serial
			{

				ckout << thisIndex.x << ' ' << thisIndex.y << ' ' << thisIndex.z << endl;
				if(thisIndex.z==n_iter-1)
					mainProxy.done(thisIndex.x, thisIndex.y, curr_chunk);

			}
		};
		
	};

};


